#include "stdafx.h"

#include "System/Components/Audio/Music.h"

#include "System/Managers/AssetManager.h"
#include "System/Managers/AudioManager.h"

////////////////////////////////////////////////////////////////////////////////
Music::Music()
	: m_MusicId(MusicId(0))
{
}

////////////////////////////////////////////////////////////////////////////////
Music::~Music()
{
	Deinit();
}

////////////////////////////////////////////////////////////////////////////////
bool Music::Init(MusicId id)
{
	const auto& data = AssetManager::Instance().GetMusicData(id);
	//ReturnIf(!data, false);

	m_AudioParameters.m_Volume			= data.m_Volume;
	m_AudioParameters.m_ObjectType		= EObjectType::Music;
	m_MusicId							= id;

	return true;
}

////////////////////////////////////////////////////////////////////////////////
void Music::Deinit()
{
	AudioObject::Reset();
}

////////////////////////////////////////////////////////////////////////////////
void Music::Play()
{
	ReturnIf(m_AudioParameters.m_Volume <= 0);

	AudioManager::Instance().PlayMusic(AssetManager::Instance().GetMusicData(m_MusicId), m_AudioParameters.m_Loops);
}

////////////////////////////////////////////////////////////////////////////////
void Music::Pause(bool paused)
{
	AudioManager::Instance().PauseMusic(paused);
}

////////////////////////////////////////////////////////////////////////////////
void Music::Stop()
{
	AudioManager::Instance().StopMusic();
}

////////////////////////////////////////////////////////////////////////////////
bool Music::IsPlaying() const
{
	return AudioManager::Instance().IsMusicPlaying();
}

////////////////////////////////////////////////////////////////////////////////
void Music::SetVolume(uint8_t volume)
{
	AudioManager::Instance().SetMusicVolume(volume);
}

////////////////////////////////////////////////////////////////////////////////
uint8_t Music::GetVolume()
{
	return AudioManager::Instance().GetMusicVolume();
}